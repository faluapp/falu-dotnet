trigger:
  batch: true
  branches:
    include:
      - refs/tags/*
  paths:
    exclude: # no need to rebuild on changes in documentation
      - README.md
      - LICENSE
      - CHANGELOG.md
      - docs/**

pr:
  branches:
    include:
      - main
  paths:
    exclude: # no need to rebuild on changes in documentation
      - README.md
      - LICENSE
      - CHANGELOG.md
      - docs/**

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'windows-latest'

    variables:
      solution: '**/*.sln'
      buildConfiguration: 'Release'

    steps:
    - task: GitVersion@5
      displayName: 'GitVersion'
      inputs:
        configFilePath: '$(Build.SourcesDirectory)/GitVersion.yml'

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet'

    - task: NuGetCommand@2
      displayName: 'Nuget restore'
      inputs:
        restoreSolution: '$(solution)'
        vstsFeed: 'tingle'

    - task: VSBuild@1
      displayName: 'Build solution'
      inputs:
        solution: '$(solution)'
        platform: 'Any CPU'
        configuration: '$(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet test'
      inputs:
        command: test
        projects: '**/*[Tt]ests*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet pack'
      inputs:
        command: pack
        nobuild: true
        versioningScheme: byEnvVar
        versionEnvVar: 'GITVERSION_NUGETVERSION'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: 'drop'

- stage: Release
  dependsOn: Build
  jobs:
  - deployment: Internal
    environment: Azure Artifacts (Nuget)
    pool:
      vmImage: 'windows-latest'

    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/drop/**/*.nupkg'
              publishVstsFeed: 'tingle'
              allowPackageConflicts: true
